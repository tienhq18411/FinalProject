<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
      integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2"
      crossorigin="anonymous"
    />

    <link rel="stylesheet" href="http://localhost:3000/assets/vendors/mdi/css/materialdesignicons.min.css" />
    <link rel="stylesheet" href="http://localhost:3000/assets/vendors/flag-icon-css/css/flag-icon.min.css" />
    <link rel="stylesheet" href="http://localhost:3000/assets/vendors/css/vendor.bundle.base.css" />
    <link rel="stylesheet" href="http://localhost:3000/assets/vendors/select2/select2.min.css" />
    <link rel="stylesheet" href="http://localhost:3000/assets/vendors/select2-bootstrap-theme/select2-bootstrap.min.css" />
    <link rel="stylesheet" href="http://localhost:3000/assets/css/style.css" />
    {{!-- <link rel="shortcut icon" href="http://localhost:3000/assets/images/favicon.png" /> --}}
  </head>
  <body>
    <a href="/host"><button class="btn btn-light">Back to manage page</button></a>
    <form action="" method="post" enctype="multipart/form-data">
      <div class="col-12 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h4 class="card-title">Create New Post</h4>
                    <p class="card-description">Infomation</p>
                
                      <div class="form-group">
                        <label for="title">Title</label>
                        <input type="text" name="title" class="form-control" id="title" placeholder="Title" required/>
                      </div>
                      <div class="form-group">
                        <label for="price">Price</label>
                        <input type="number" name="price" class="form-control" id="price" placeholder="Price" required/>
                      </div>
                      <div class="form-group">
                        <label for="size">Size</label>
                        <input type="number" name="size" class="form-control" id="size" placeholder="Size" required/>
                      </div>
                      <div class="form-group">
                        <label for="price">Bed</label>
                        <input type="number" name="bed" class="form-control" id="bed" placeholder="Amount of Bed" required/>
                      </div>
                      <div class="form-group">
                        <label for="price">Bath</label>
                        <input type="number" name="bath" class="form-control" id="bath" placeholder="Amount of Bath" required/>
                      </div>
                      <div class="form-group">
                        <label>File upload</label>
                        <input type="file" name="img" class="file-upload-default" multiple/>
                        <div class="input-group col-xs-12">
                          <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image" />
                          <span class="input-group-append">
                            <button class="file-upload-browse btn btn-primary" type="button"> Upload </button>
                          </span>
                        </div>
                      </div>
                      <div class="form-group">
                      <label for="exampleFormControlSelect1">City</label>
                      <select class="form-control form-control-lg" id="city" name="city">
                        <option>City</option>
                      </select>
                      </div>
                      <div class="form-group">
                      <label for="exampleFormControlSelect1">District</label>
                      <select class="form-control form-control-lg" id="district" name="district">
                        <option disabled>District</option>
                      </select>
                      </div>
                      <div class="form-group">
                      <label for="exampleFormControlSelect1">Ward</label>
                      <select class="form-control form-control-lg" id="ward" name="ward">
                        <option disabled>Ward</option>
                      </select>
                      </div>
                      <div class="form-group">
                        <label for="address">Address</label>
                        <input type="text" name="addressDetail" class="form-control" id="address" placeholder="Address" />
                      </div>
                      <div class="form-group">
                        <label for="address">Location In Google Map</label>
                        <input type="text" name="addressMap" class="form-control" id="address-map" placeholder="Location In Google Map" />
                      </div>
                      <div class="form-group">
                        <label for="description">Description</label>
                        <textarea
                          class="form-control"
                          id="description"
                          rows="4"
                          name="description"
                        ></textarea>
                      </div>
                      <button type="submit" class="btn btn-primary mr-2"> Submit </button>
                     
          
                  </div>
                </div>
              </div>
              </form>
    <!-- Template Javascript -->
    <script src="http://localhost:3000/js/main.js"></script>
    <script src="http://localhost:3000/assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="http://localhost:3000/assets/vendors/select2/select2.min.js"></script>
    <script src="http://localhost:3000/assets/vendors/typeahead.js/typeahead.bundle.min.js"></script>
    <script src="http://localhost:3000/assets/js/off-canvas.js"></script>
    <script src="http://localhost:3000/assets/js/hoverable-collapse.js"></script>
    <script src="http://localhost:3000/assets/js/misc.js"></script>
    <script src="http://localhost:3000/assets/js/file-upload.js"></script>
    <script src="http://localhost:3000/assets/js/typeahead.js"></script>
    <script src="http://localhost:3000/assets/js/select2.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script>
      var citis = document.getElementById("city");
      var districts = document.getElementById("district");
      var wards = document.getElementById("ward");
      var Parameter = {
        url: "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json", 
        method: "GET", 
        responseType: "application/json", 
      };
      var promise = axios(Parameter);
      promise.then(function (result) {
        renderCity(result.data);
      });

      function renderCity(data) {
        for (const x of data) {
          citis.options[citis.options.length] = new Option(x.Name, x.Name);
        }
        citis.onchange = function () {
          district.length = 1;
          ward.length = 1;
          if(this.value != ""){
            const result = data.filter(n => n.Name === this.value);

            for (const k of result[0].Districts) {
              district.options[district.options.length] = new Option(k.Name, k.Name);
            }
          }
        };
        district.onchange = function () {
          ward.length = 1;
          const dataCity = data.filter((n) => n.Name === citis.value);
          if (this.value != "") {
            const dataWards = dataCity[0].Districts.filter(n => n.Name === this.value)[0].Wards;

            for (const w of dataWards) {
              wards.options[wards.options.length] = new Option(w.Name, w.Name);
            }
          }
        };
        // => address
      }
		const titleEl = document.querySelector('#title');
    const priceEl = document.querySelector('#price');
    const sizeEl = document.querySelector('#size');
    const bedEl = document.querySelector('#bed')
    const bathEl = document.querySelector('#bath');
    const cityEl = document.querySelector('#city');
    const districtEl = document.querySelector('#district');
    const wardEl = document.querySelector('#ward');
    const addressEl = document.querySelector('#address');

    const checkTitle = () => {
        let valid = false;

        const min = 6,
        max = 50;

        const title = titleEl.value.trim();
        if (!isRequired(title)) {
            showError(titleEl, 'Title cannot be blank.');
        } else if (!isBetween(title.length, min, max)) {
            showError(titleEl, `Title must be between ${min} and ${max} characters.`)
        } else {
            showSuccess(titleEl);
            valid = true;
        }
        return valid;
    };


    const checkPrice = () => {
        let valid = false;
        const min = 100000,
        max = 100000000;
        const price = priceEl.value.trim();
        if (!isRequired(price)) {
          showError(priceEl, 'Price cannot be blank.');
        }
        else if (!isBetween(price.length, min, max)) {
            showError(priceEl, `Price must be between ${min} and ${max} vnd.`)
        } 
        else {
          showSuccess(priceEl);
          valid = true;
        }
        return valid;
    };

    const checkSize = () => {
        let valid = false;
        const size = sizeEl.value.trim();
        const min = 10,
        max = 150;
        if (!isRequired(size)) {
            showError(sizeEl, 'Size cannot be blank.');
        }
        else if (!isBetween(size.length, min, max)) {
            showError(sizeEl, `Size must be between ${min} and ${max} m2.`)
        } 
        else {
            showSuccess(sizeEl);
            valid = true;
        }

        return valid;
    };

    const checkBed = () => {
        let valid = false;
        const min = 1,
        max = 5;
        const bed = bedEl.value.trim();

        if (!isRequired(bed)) {
            showError(bedEl, 'Bed cannot be blank.');
        } else if (!isBetween(bed.length, min, max)) {
            showError(bedEl, `Bed must be between ${min} and ${max} amount.`)

        } else {
            showSuccess(bedEl);
            valid = true;
        }

        return valid;
    };

      const checkBath = () => {
        let valid = false;
        const min = 1,
        max = 5;
        const bath = bathEl.value.trim();

        if (!isRequired(bath)) {
            showError(bathEl, 'Bath cannot be blank.');
        } else if (!isBetween(bath.length, min, max)) {
            showError(bathEl, `Bath must be between ${min} and ${max} amount.`)

        } else {
            showSuccess(bathEl);
            valid = true;
        }

        return valid;
    };
    const checkCity = () => {
        let valid = false;
        const city = cityEl.value.trim();

        if (!isRequired(city)) {
            showError(cityEl, 'Please select a city');
        }else {
            showSuccess(cityEl);
            valid = true;
        }

        return valid;
    };
    const checkDistrict = () => {
        let valid = false;
        const district = districtEl.value.trim();

        if (!isRequired(district)) {
            showError(districtEl, 'Please select a district');
        }else {
            showSuccess(districtEl);
            valid = true;
        }

        return valid;
    };
   const checkWard = () => {
        let valid = false;
        const ward = wardEl.value.trim();

        if (!isRequired(ward)) {
            showError(wardEl, 'Please select a ward');
        }else {
            showSuccess(wardEl);
            valid = true;
        }

        return valid;
    };
    const isRequired = value => value === '' ? false : true;
    const isBetween = (length, min, max) => length < min || length > max ? false : true;
    const showError = (input, message) => {
        // get the form-field element
        const formField = input.parentElement;
        // add the error class
        formField.classList.remove('success');
        formField.classList.add('error');

        // show the error message
        const error = formField.querySelector('small');
        error.textContent = message;
    };

    const showSuccess = (input) => {
        // get the form-field element
        const formField = input.parentElement;

        // remove the error class
        formField.classList.remove('error');
        formField.classList.add('success');

        // hide the error message
        const error = formField.querySelector('small');
        error.textContent = '';
    }


    form.addEventListener('submit', function (e) {
        // prevent the form from submitting

        // validate fields
        let isTitleValid = checkTitle(),
            isPriceValid = checkPrice(),
            isSizeValid = checkSize(),
            isBedValid = checkBed();
            isBathValid = checkBath();
            isCityValid = checkCity();
            isDistrictValid = checkDistrict();
            isWardValid = checkWard();

        let isFormValid = isTitleValid 
        && isPriceValid
        && isSizeValid 
        && isBedValid 
        && isBathValid 
        && isCityValid 
        && isDistrictValid 
        && isWardValid

        // submit to the server if the form is valid
      if(!isFormValid) {
          e.preventDefault();

      }
        if (isFormValid) {
        addEventListener('submit', (event) => {});
        }
    });


    const debounce = (fn, delay = 500) => {
        let timeoutId;
        return (...args) => {
            // cancel the previous timer
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            // setup a new timer
            timeoutId = setTimeout(() => {
                fn.apply(null, args)
            }, delay);
        };
    };

    form.addEventListener('input', debounce(function (e) {
        switch (e.target.id) {
            case 'title':
                checkUsername();
                break;
            case 'price':
                checkPhone();
                break;
            case 'size':
                checkPassword();
                break;
            case 'bed':
                checkConfirmPassword();
                break;
                case 'bath':
                checkConfirmPassword();
                break;
                case 'confirm-password':
                checkConfirmPassword();
                break;
                case 'confirm-password':
                checkConfirmPassword();
                break;
                case 'confirm-password':
                checkConfirmPassword();
                break;
                case 'confirm-password':
                checkConfirmPassword();
                break;
        }
    }));
	</script>
  </body>
</html>